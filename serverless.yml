service: go-serverless-todo
frameworkVersion: '4.14.4'

provider:
  name: aws
  runtime: provided.al2
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  architecture: x86_64
  memorySize: 256
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: true
  environment:
    TODOS_TABLE: ${self:service}-${opt:stage, 'dev'}-todos
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}
  httpApi:
    cors: true
    authorizers:
      cognito:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ""
            - - "https://cognito-idp."
              - ${self:provider.region}
              - ".amazonaws.com/"
              - { Ref: CognitoUserPool }
        audience:
          - ${self:custom.appClientId}

package:
  artifact: bin/handler.zip

functions:
  api:
    handler: bootstrap
    description: "Unified Lambda for TODO API"
    memorySize: 256
    timeout: 5
    environment:
      STAGE: ${opt:stage, 'dev'}
    events:
      - httpApi:
          path: /todos
          method: GET
          authorizer: cognito
      - httpApi:
          path: /todos
          method: POST
          authorizer: cognito

resources:
  Resources:

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${self:provider.stage}-user-pool
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireUppercase: false
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${self:provider.stage}-client
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_SRP_AUTH
        SupportedIdentityProviders:
          - COGNITO
        CallbackURLs:
          - http://localhost:3000
        LogoutURLs:
          - http://localhost:3000/logout
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        AllowedOAuthFlowsUserPoolClient: true

    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: ${self:service}-${self:provider.stage}-auth-${sls:stage}-ds
        UserPoolId: !Ref CognitoUserPool

    HttpApiLogGroup:
      Type: AWS::Logs::LogGroup
      Properties:
        LogGroupName: /aws/http-api-access-logs
        RetentionInDays: 7

custom:
  userPoolId:
    Ref: CognitoUserPool
  appClientId:
    Ref: CognitoUserPoolClient