service: go-serverless-todo
frameworkVersion: '4.14.4'

provider:
  name: aws
  runtime: provided.al2
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  architecture: x86_64
  memorySize: 256
  timeout: 10
  logRetentionInDays: 7
  versionFunctions: true
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
      fullExecutionData: true
      format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller": "$context.identity.caller", "user": "$context.identity.user", "requestTime": "$context.requestTime", "httpMethod": "$context.httpMethod", "resourcePath": "$context.resourcePath", "status": "$context.status", "protocol": "$context.protocol", "responseLength": "$context.responseLength" }'
  environment:
    TODOS_TABLE: ${self:service}-${opt:stage, 'dev'}-todos
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
            - dynamodb:UpdateItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.TODOS_TABLE}
  tags:
    Project: go-serverless-todo
    Environment: ${opt:stage, 'dev'}

package:
  artifact: bin/handler.zip

functions:
  api:
    handler: bootstrap
    description: "Unified Lambda for TODO API"
    memorySize: 256
    timeout: 5
    environment:
      STAGE: ${opt:stage, 'dev'}
    events:
      - http:
          path: todos
          method: get
          cors: true
      - http:
          path: todos
          method: post
          cors: true

resources:
  Resources:
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
